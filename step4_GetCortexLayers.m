function X=step4_GetCortexLayers(IM,C,idx)
% Extract open contours separating the cortex into 5 OR 6 layers.
% Therefore, it is expected that the image will contain 4 OR 5 contours.
%
% INPUT:
%   - IM    : RGB image containing open contours (in BLACK colour)
%             demarcating cortical layers. 
%   - C,idx : outputs generated by 'step2_ConstructClosedContour' function.
%
% OUTPUT:
%   - X    : 1-by-m cell containing coordinates of the m polylines.
%
% AUTHOR: Anton Semechko (a.semechko@gmail.com)
% DATE: Jun.2014
%


% Convert to binary
bw=sum(double(IM),3)<50;

% Set pixels along the perimeter of the image to black in case one or more
% polylines ends there 
bw(:,1)=false;
bw(:,end)=false;
bw(1,:)=false;
bw(end,:)=false;

% Remove potential fluff
bw=bwareaopen(bw,11);
L=bwlabel(bw);
m=max(L(:));
if m<4
    error('Unable to find open contours used to partion the cortex into layers')
end

% Merge disconnected line segments
bw=MergeLineSegments(bw);

% Get the coordinates
L=bwlabel(bw);
m=max(L(:));
X=cell(1,m);
for i=1:m
    
    % Get the end-points of the i-th polyline 
    bw_end=bwmorph(L==i,'endpoints');
    id=find(bw_end(:));
    [y,x]=ind2sub(size(bw),id);
    
    % Select the endpoint with the smallest y value (closer to the top of the image)
    if y(1)<y(2)
        p=[y(1) x(1)];
    else
        p=[y(2) x(2)];
    end
    
    % Trace the polyline
    x=bwtraceboundary(L==i,p,'n',8,sum(L(:)==i));
    x=[x(:,2) x(:,1)];
    
    % Simplify the polyline
    x=DecimatePoly([x;x(1,:)],[50 1],false);
    x(end,:)=[];
    
    % Remove points outside of the region enclosed by pia and white matter polylines
    id=inpoly(x,C);
    X{i}=x(id,:);
    
end

% Order polylines based on distance away from pia
De=zeros(1,m);
for i=1:m
    De(i)=DistBetween2Contours(X{i},C(idx(3):idx(4),:));
end
[~,srt]=sort(De);
X=X(srt);

% Extend polyline endpoints to the contour boundaries
idx1=[idx(4) idx(1)];   % bottom of the trapezoid
idx2=[idx(2) idx(3)];   % top of the trapezoid
for i=1:m
    
    [D1,P1]=Pt2ContourDistance(C(idx1,:),X{i}(1,:));
    [D2,P2]=Pt2ContourDistance(C(idx2,:),X{i}(1,:));
    if D1<D2
        X{i}=[P1;X{i}];
        [~,P]=Pt2ContourDistance(C(idx2,:),X{i}(end,:));
        X{i}=[X{i};P];
    else
        X{i}=[P2;X{i}];
        [~,P]=Pt2ContourDistance(C(idx1,:),X{i}(end,:));
        X{i}=flipud([X{i};P]);
    end
    
end



%==========================================================================
function bw=MergeLineSegments(bw)

% Thin the lines to one pixel
bw=bwmorph(bw,'dilate');
bw=bwmorph(bw,'thin',Inf);

% Get the end-points
bw_end=bwmorph(bw,'endpoints');
idx=find(bw_end(:));
[y,x]=ind2sub(size(bw),idx);
n=numel(y);

% Remove spurious endpoints (if any)
idx=false(n,1);
for i=1:n
    
    % Crop a small window around the end-point
    y_lim=[y(i)-10 y(i)+10];
    x_lim=[x(i)-10 x(i)+10];
    if y_lim(1)<1, y_lim(1)=1; end
    if y_lim(2)>size(bw,1), y_lim(2)=size(bw,1); end
    if x_lim(1)<1, x_lim(1)=1; end
    if x_lim(2)>size(bw,2), x_lim(2)=size(bw,2); end
    W=bw(y_lim(1):y_lim(2),x_lim(1):x_lim(2));
    m=sum(W(:));
    
    % Remove spurs
    W=bwmorph(W,'spur',5);
    if (m-sum(W(:)))<5
        bw(y_lim(1):y_lim(2),x_lim(1):x_lim(2))=W;
        idx(i)=true;
    end

end
y=y(:); y(idx)=[];
x=x(:); x(idx)=[];
n=numel(y);
if n==8 || n==10, return; end

if n<8 || mod(n,2)==1
    error('Unable to find open contours used to partion the cortex into layers')
end


% Compute distances between the endpoints
X1=permute([y x],[1 3 2]);
X2=permute([y x],[3 1 2]);
D=bsxfun(@minus,X1,X2);
D=sqrt(sum(D.^2,3));
D(1:(n+1):end)=Inf;

% Connect lines segments until there are five left. NOTE: problems WILL
% arise if there are actually 4 polylines and at least one of them 
% was not drawn continuously. 
while size(D,1)>10
    
    % Find a pair of closest end-points and connect them
    [D_min,idx]=min(D(:));
    [idx1,idx2]=ind2sub(size(D),idx);
    
    % Connect the endpoints by a straight line
    X1=[y(idx1) x(idx1)];
    X2=[y(idx2) x(idx2)];

    d=X2-X1; 
    t=linspace(0,D_min,3*D_min);    
    l=bsxfun(@times,d/D_min,t(:));
    l=bsxfun(@plus,X1,l);

    % Add the connecting line segment to the image 
    l=round(l); 
    l=sub2ind(size(bw),l(:,1),l(:,2));
    bw(l)=true;

    % Remove the connected end-points from the list
    y([idx1,idx2])=[];   x([idx1,idx2])=[];
    D([idx1,idx2],:)=[]; D(:,[idx1,idx2])=[];


end
if size(D,1)~=10
    error('Unable to extract open contours used to partion the cortex into layers')
end

