function CHAT_ProcessImageData(DirMain,flag)
% Batch process all of the image data contained in the primary data
% directory. 
%
% INPUT:
%   - DirMain   : full name of the primary data directory. It is expected 
%                 that image data folders (corresponding to individual 
%                 histology images) are contained in the sub-directories of
%                 DirMain. Here is a sample illustration of expected 
%                 organizational hierarchy:
%
%                          Primary Data Directory (e.g., 'C:\Users\Anton\Documents\Histology Data\')
%                                    |                                                 
%                             Sub-directory (e.g., '...\Histology Data\Study_SubjectA\')       
%                                    |
%                            Image Data Folder (e.g., '...\Study_SubjectA\SampleSlice_01\')                                    
%         _____________ _____________|_____________ _____________
%        |             |             |             |             |
%     pia-wm      polylines         ZNF           CUX          DAPI      
%
%  In this example, DirMain contains only one sub-directory, and said
%  sub-directory contains a single image data folder. In practice, both 
%  the number of sub-directories, and number data-folders per sub-directory 
%  can vary arbitrarily. Each image data folder, however, must contain 
%  the following five images (any standard image format is acceptable),
%  all derived from the same histology slice:
%
%   'pia-wm'    : image of pia and white matter boundaries,
%   'polylines' : image of internal boundaries subdividing the space 
%                 between pia and white matter into either four or five 
%                 sub-regions,
%   'ZNF'       : segmentaion of a ZNF image; red 
%   'CUX'       : segmentaion of a CUX image; green 
%   'DAPI'      : segmentaion of a DAPI image; blue
%
%  Note, the five image files can have any name as long as each file name 
%  incorporates one of indentifying key-words listed above (i.e., 'pia-wm',
%  'polylines', etc.).
%
%   - flag      : set flag=true to ignore all data files previously
%                 generated by the 'CHAT_ProcessImageData' function and 
%                 re-precess all image data contained in DirMain. 
%                 flag=false is the default setting; meaning that only
%                 the image data folders without the 'cortex_data.txt' 
%                 files will be processed. 
%
% OUPUT:
%  The data extracted from each image data folder will be saved in the
%  'cortex_data.txt', under the same directory. This function will also 
%  generate 'cortex_boundaries.tif' files that should be visually inspected
%  to confirm that the imlemented algorithm correctly identified cortical 
%  boundaries.
%
% AUTHOR: Anton Semechko (a.semechko@gmail.com)
% DATE: June.2014
%


if nargin<2 || isempty(flag), flag=false; end

fs=filesep;
if ~strcmpi(DirMain(end),fs), DirMain=strcat(DirMain,fs); end
if exist(DirMain,'dir')~=7
    error('Specified directory does not exist')
end


% Find sub-directories
DirSub=dir(DirMain);
DirSub(1:2)=[];
if isempty(DirSub)
    error('Specified directory does not contain any data')
end
DirSub=DirSub(:);
n=numel(DirSub);
idx=false(n,1);
for i=1:n
    if DirSub(i).isdir, idx(i)=true; end
end
DirSub=DirSub(idx);
if isempty(DirSub)
    error('Specified directory does not contain any sub-directories')
end

% Find data folders contained in the sub-directories 
n=numel(DirSub);
DirData={}; k=0;
for i=1:n
   
    DirSub_i=strcat(DirMain,DirSub(i).name,fs);
    DirCont=dir(DirSub_i);
    
    DirCont(1:2)=[];
    if isempty(DirCont), continue; end

    cnt=0;
    for j=1:numel(DirCont)
        if DirCont(j).isdir
            cnt=cnt+1; 
            k=k+1;
            DirData{k}=strcat(DirSub_i,DirCont(j).name,fs); %#ok<*AGROW>
        end
    end
    if cnt==0, continue; end
    
end
if k==0
    error('Sub-directories do not contain any image data folders')
end


% Find data folders with data that has not been processed or has to be
% re-processed
DataFileList={};
for i=1:k
    
    DirCont=dir(DirData{i});
    DirCont(1:2)=[];
    if isempty(DirCont)
        fprintf(2,'%s does not contain any image data',DirData{i})
        continue
    end
    
    % Get the names of the image files
    FileNames=cell(1,5);
    m=0;
    chk=false;
    for j=1:numel(DirCont)
        if DirCont(j).isdir, continue; end
        
        [~,FileName,Ext]=fileparts(DirCont(j).name);
        FileName=lower(FileName);
        %disp(FileName)
        if strcmp(Ext,'.txt') && strcmp(FileName,'cortex_data')
            if ~flag
                chk=true;
                break
            else
                continue
            end  
        end
        
        FN=lower(FileName);
        if ~isempty(strfind(FN,'pia')) %#ok<*STREMP>
            idx=1;
        elseif ~isempty(strfind(FN,'lines'))
            idx=2;
        elseif ~isempty(strfind(FN,'znf')) || ~isempty(strfind(FN,'red'))
            idx=3;
        elseif ~isempty(strfind(FN,'cux')) || ~isempty(strfind(FN,'green'))
            idx=4;
        elseif ~isempty(strfind(FN,'dapi'))
            idx=5;
        else
            continue
        end
                
        if ~isempty(FileNames{idx})
            error('%s contains ambiguous image file names',DirData{i})
        else
            FileNames{idx}=strcat(DirData{i},DirCont(j).name);
        end
        m=m+1;
    end
    if chk, continue; end
    
    if m~=5
        error('%s does not contain all of the required image files (or files are not labelled correctly)',DirData{i})
    end
    DataFileList{numel(DataFileList)+1}=FileNames;

end

if isempty(DataFileList)
    if ~flag
        fprintf('Did not find any new image data folders\n')
        return
    else
        fprintf(2,'\nSpecified directory (%s) does not contain any image data that matches required formating\n',DirMain)
    end
end


% Begin data extraction 
tic
n=numel(DataFileList); 
for i=1:n
    
    % Load the images 
    [DataFld,~,~]=fileparts(DataFileList{i}{1});
    IM=cell(1,5);
    chk=false;
    siz=zeros(5,3);
    
    for j=1:5
        try
            IM{j}=imread(DataFileList{i}{j});
            siz(j,:)=[size(IM{j},1) size(IM{j},2) size(IM{j},3)];
        catch err %#ok<*NASGU>
            chk=true;
            [~,im,~]=fileparts(DataFileList{i}{j});
            warning('Unable to load image file %s. \nImages in folder %s will not be processed.\n',im,DataFld)
        end
    end
    
    % Check image dimensions
    if sum(siz(:,1)==siz(1,1))<5 || sum(siz(:,2)==siz(1,2))<5 || sum(siz(:,3)<=3)<5
        chk=true;
        warning('Images in data folder %s have varying dimensions and will not be processed.\n',DataFld)
    end
        
    if chk, continue; end
    
    % Extract data
    t0=clock;
    fprintf('Extracting data from image data folder %u of %u ',i,n)
    [Data,im]=step6_GetSampleData(IM{1},IM{2},IM{3},IM{4},IM{5});
    
    % Save data    
    DataFile=strcat(DataFld,'\cortex_data.txt');
    step7_WriteData2TextFile(Data,DataFile)
    ImFile=strcat(DataFld,'\cortex_boundaries.tif');
    imwrite(im,ImFile)
    clear Data im IM
    fprintf(' %.0f sec\n',etime(clock,t0))
    
end

fprintf('DATA EXTRACTION COMPLETED SUCCESSFULLY. TOTAL ELAPSED TIME: %.1f min\n\n',toc/60)
